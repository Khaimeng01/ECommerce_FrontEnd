{"version":3,"file":"ngx-lazy-load-images.js","sources":["ng://ngx-lazy-load-images/lib/ngx-lazy-load-images.directive.ts","ng://ngx-lazy-load-images/lib/ngx-lazy-load-images.module.ts","ng://ngx-lazy-load-images/public-api.ts","ng://ngx-lazy-load-images/ngx-lazy-load-images.ts"],"sourcesContent":["import { Directive, ElementRef, Renderer2, Input, NgZone, Inject, PLATFORM_ID, OnInit, OnDestroy } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\n\n/**\n * Angular Lazy Loading Images Directive\n *\n * The library allows to lazy load images from your web application\n * using the MutationObserver and the IntersectionObserver. Images will be loaded as\n * soon as they enter the viewport in a non-blocking way.\n */\n@Directive({\n  selector: '[lazy-load-images]'\n})\nexport class LazyLoadImagesDirective implements OnInit, OnDestroy {\n  @Input('lazy-load-images') intersectionObserverConfig: object | string;\n\n  intersectionObserver: IntersectionObserver;\n  rootElement: HTMLElement;\n\n  constructor(\n    element: ElementRef,\n    public renderer: Renderer2,\n    public ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: any) {\n    this.rootElement = element.nativeElement;\n  }\n\n  init() {\n    this.registerIntersectionObserver();\n\n    this.observeDOMChanges(this.rootElement, () => {\n      const imagesFoundInDOM = this.getAllImagesToLazyLoad(this.rootElement);\n      imagesFoundInDOM.forEach((image: HTMLElement) => this.intersectionObserver.observe(image));\n    });\n  }\n\n  ngOnInit() {\n    if (!this.isBrowser()) {\n      return;\n    }\n\n    require('intersection-observer');\n    this.ngZone.runOutsideAngular(() => this.init());\n  }\n\n  ngOnDestroy() {\n    if (this.intersectionObserver) {\n      this.intersectionObserver.disconnect();\n    }\n  }\n\n  isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  registerIntersectionObserver() {\n    this.intersectionObserver = new IntersectionObserver(\n      images => images.forEach(image => this.onIntersectionChange(image)),\n      this.intersectionObserverConfig instanceof Object ? this.intersectionObserverConfig : undefined\n    );\n\n    return this.intersectionObserver;\n  }\n\n  observeDOMChanges(rootElement: HTMLElement, onChange: () => void) {\n    // Create a Mutation Observer instance\n    const observer = new MutationObserver(() => onChange());\n\n    // Observer Configuration\n    const observerConfig = {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true\n    };\n\n    // Observe Directive DOM Node\n    observer.observe(rootElement, observerConfig);\n\n    // Fire onChange callback to check current DOM nodes\n    onChange();\n\n    return observer;\n  }\n\n  getAllImagesToLazyLoad(pageNode: HTMLElement) {\n    return Array.from(pageNode.querySelectorAll('img[data-src], [data-srcset], [data-background-src]'));\n  }\n\n  onIntersectionChange(image: any) {\n    if (!image.isIntersecting) {\n      return;\n    }\n\n    this.onImageAppearsInViewport(image.target);\n  }\n\n  onImageAppearsInViewport(image: any) {\n    if (image.dataset.src) {\n      this.renderer.setAttribute(image, 'src', image.dataset.src);\n      this.renderer.removeAttribute(image, 'data-src');\n    }\n\n    if (image.dataset.srcset) {\n      this.renderer.setAttribute(image, 'srcset', image.dataset.srcset);\n      this.renderer.removeAttribute(image, 'data-srcset');\n    }\n\n    if (image.dataset.backgroundSrc) {\n      this.renderer.setStyle(image, 'background-image', `url(${image.dataset.backgroundSrc})`);\n      this.renderer.removeAttribute(image, 'data-background-src');\n    }\n\n    // Stop observing the current target\n    if (this.intersectionObserver) {\n      this.intersectionObserver.unobserve(image);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LazyLoadImagesDirective } from './ngx-lazy-load-images.directive';\n\n@NgModule({\n  declarations: [LazyLoadImagesDirective],\n  exports: [LazyLoadImagesDirective]\n})\nexport class LazyLoadImagesModule {}\n","/*\n * Public API Surface of ngx-lazy-load-images\n */\n\nexport * from './lib/ngx-lazy-load-images.directive';\nexport * from './lib/ngx-lazy-load-images.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}