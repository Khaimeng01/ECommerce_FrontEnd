{"version":3,"file":"ngx-lazy-load-images.js","sources":["ngx-lazy-load-images/lib/ngx-lazy-load-images.directive.ts","ngx-lazy-load-images/lib/ngx-lazy-load-images.module.ts","ngx-lazy-load-images/public-api.ts","ngx-lazy-load-images/ngx-lazy-load-images.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Renderer2, Input, NgZone, Inject, PLATFORM_ID, OnInit, OnDestroy } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\n\n/**\n * Angular Lazy Loading Images Directive\n *\n * The library allows to lazy load images from your web application\n * using the MutationObserver and the IntersectionObserver. Images will be loaded as\n * soon as they enter the viewport in a non-blocking way.\n */\n@Directive({\n  selector: '[lazy-load-images]'\n})\nexport class LazyLoadImagesDirective implements OnInit, OnDestroy {\n  @Input('lazy-load-images') intersectionObserverConfig: object | string;\n\n  intersectionObserver: IntersectionObserver;\n  rootElement: HTMLElement;\n\n  constructor(\n    element: ElementRef,\n    public renderer: Renderer2,\n    public ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: any) {\n    this.rootElement = element.nativeElement;\n  }\n\n  init() {\n    this.registerIntersectionObserver();\n\n    this.observeDOMChanges(this.rootElement, () => {\n      const imagesFoundInDOM = this.getAllImagesToLazyLoad(this.rootElement);\n      imagesFoundInDOM.forEach((image: HTMLElement) => this.intersectionObserver.observe(image));\n    });\n  }\n\n  ngOnInit() {\n    if (!this.isBrowser()) {\n      return;\n    }\n\n    require('intersection-observer');\n    this.ngZone.runOutsideAngular(() => this.init());\n  }\n\n  ngOnDestroy() {\n    if (this.intersectionObserver) {\n      this.intersectionObserver.disconnect();\n    }\n  }\n\n  isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  registerIntersectionObserver() {\n    this.intersectionObserver = new IntersectionObserver(\n      images => images.forEach(image => this.onIntersectionChange(image)),\n      this.intersectionObserverConfig instanceof Object ? this.intersectionObserverConfig : undefined\n    );\n\n    return this.intersectionObserver;\n  }\n\n  observeDOMChanges(rootElement: HTMLElement, onChange: () => void) {\n    // Create a Mutation Observer instance\n    const observer = new MutationObserver(() => onChange());\n\n    // Observer Configuration\n    const observerConfig = {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true\n    };\n\n    // Observe Directive DOM Node\n    observer.observe(rootElement, observerConfig);\n\n    // Fire onChange callback to check current DOM nodes\n    onChange();\n\n    return observer;\n  }\n\n  getAllImagesToLazyLoad(pageNode: HTMLElement) {\n    return Array.from(pageNode.querySelectorAll('img[data-src], [data-srcset], [data-background-src]'));\n  }\n\n  onIntersectionChange(image: any) {\n    if (!image.isIntersecting) {\n      return;\n    }\n\n    this.onImageAppearsInViewport(image.target);\n  }\n\n  onImageAppearsInViewport(image: any) {\n    if (image.dataset.src) {\n      this.renderer.setAttribute(image, 'src', image.dataset.src);\n      this.renderer.removeAttribute(image, 'data-src');\n    }\n\n    if (image.dataset.srcset) {\n      this.renderer.setAttribute(image, 'srcset', image.dataset.srcset);\n      this.renderer.removeAttribute(image, 'data-srcset');\n    }\n\n    if (image.dataset.backgroundSrc) {\n      this.renderer.setStyle(image, 'background-image', `url(${image.dataset.backgroundSrc})`);\n      this.renderer.removeAttribute(image, 'data-background-src');\n    }\n\n    // Stop observing the current target\n    if (this.intersectionObserver) {\n      this.intersectionObserver.unobserve(image);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LazyLoadImagesDirective } from './ngx-lazy-load-images.directive';\n\n@NgModule({\n  declarations: [LazyLoadImagesDirective],\n  exports: [LazyLoadImagesDirective]\n})\nexport class LazyLoadImagesModule {}\n","/*\n * Public API Surface of ngx-lazy-load-images\n */\n\nexport * from './lib/ngx-lazy-load-images.directive';\nexport * from './lib/ngx-lazy-load-images.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}