import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Renderer2, Input, NgZone, Inject, PLATFORM_ID, OnInit, OnDestroy } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
/**
 * Angular Lazy Loading Images Directive
 *
 * The library allows to lazy load images from your web application
 * using the MutationObserver and the IntersectionObserver. Images will be loaded as
 * soon as they enter the viewport in a non-blocking way.
 */
let LazyLoadImagesDirective = class LazyLoadImagesDirective {
    constructor(element, renderer, ngZone, platformId) {
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.rootElement = element.nativeElement;
    }
    init() {
        this.registerIntersectionObserver();
        this.observeDOMChanges(this.rootElement, () => {
            const imagesFoundInDOM = this.getAllImagesToLazyLoad(this.rootElement);
            imagesFoundInDOM.forEach((image) => this.intersectionObserver.observe(image));
        });
    }
    ngOnInit() {
        if (!this.isBrowser()) {
            return;
        }
        require('intersection-observer');
        this.ngZone.runOutsideAngular(() => this.init());
    }
    ngOnDestroy() {
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
    }
    isBrowser() {
        return isPlatformBrowser(this.platformId);
    }
    registerIntersectionObserver() {
        this.intersectionObserver = new IntersectionObserver(images => images.forEach(image => this.onIntersectionChange(image)), this.intersectionObserverConfig instanceof Object ? this.intersectionObserverConfig : undefined);
        return this.intersectionObserver;
    }
    observeDOMChanges(rootElement, onChange) {
        // Create a Mutation Observer instance
        const observer = new MutationObserver(() => onChange());
        // Observer Configuration
        const observerConfig = {
            attributes: true,
            characterData: true,
            childList: true,
            subtree: true
        };
        // Observe Directive DOM Node
        observer.observe(rootElement, observerConfig);
        // Fire onChange callback to check current DOM nodes
        onChange();
        return observer;
    }
    getAllImagesToLazyLoad(pageNode) {
        return Array.from(pageNode.querySelectorAll('img[data-src], [data-srcset], [data-background-src]'));
    }
    onIntersectionChange(image) {
        if (!image.isIntersecting) {
            return;
        }
        this.onImageAppearsInViewport(image.target);
    }
    onImageAppearsInViewport(image) {
        if (image.dataset.src) {
            this.renderer.setAttribute(image, 'src', image.dataset.src);
            this.renderer.removeAttribute(image, 'data-src');
        }
        if (image.dataset.srcset) {
            this.renderer.setAttribute(image, 'srcset', image.dataset.srcset);
            this.renderer.removeAttribute(image, 'data-srcset');
        }
        if (image.dataset.backgroundSrc) {
            this.renderer.setStyle(image, 'background-image', `url(${image.dataset.backgroundSrc})`);
            this.renderer.removeAttribute(image, 'data-background-src');
        }
        // Stop observing the current target
        if (this.intersectionObserver) {
            this.intersectionObserver.unobserve(image);
        }
    }
};
LazyLoadImagesDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input('lazy-load-images')
], LazyLoadImagesDirective.prototype, "intersectionObserverConfig", void 0);
LazyLoadImagesDirective = __decorate([
    Directive({
        selector: '[lazy-load-images]'
    }),
    __param(3, Inject(PLATFORM_ID))
], LazyLoadImagesDirective);
export { LazyLoadImagesDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxhenktbG9hZC1pbWFnZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxhenktbG9hZC1pbWFnZXMvIiwic291cmNlcyI6WyJsaWIvbmd4LWxhenktbG9hZC1pbWFnZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFJcEQ7Ozs7OztHQU1HO0FBSUgsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFNbEMsWUFDRSxPQUFtQixFQUNaLFFBQW1CLEVBQ25CLE1BQWMsRUFDUSxVQUFlO1FBRnJDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNRLGVBQVUsR0FBVixVQUFVLENBQUs7UUFDNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFFcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFO1lBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2RSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUks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QWEsR0FBRyxDQUFDLENBQUM7WUFDekYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7U0FDN0Q7UUFFRCxvQ0FBb0M7UUFDcEMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUM7Q0FDRixDQUFBOztZQWxHWSxVQUFVO1lBQ0YsU0FBUztZQUNYLE1BQU07NENBQ3BCLE1BQU0sU0FBQyxXQUFXOztBQVRNO0lBQTFCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQzsyRUFBNkM7QUFENUQsdUJBQXVCO0lBSG5DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7S0FDL0IsQ0FBQztJQVdHLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBVlgsdUJBQXVCLENBeUduQztTQXpHWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5wdXQsIE5nWm9uZSwgSW5qZWN0LCBQTEFURk9STV9JRCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuZGVjbGFyZSB2YXIgcmVxdWlyZTogYW55O1xuXG4vKipcbiAqIEFuZ3VsYXIgTGF6eSBMb2FkaW5nIEltYWdlcyBEaXJlY3RpdmVcbiAqXG4gKiBUaGUgbGlicmFyeSBhbGxvd3MgdG8gbGF6eSBsb2FkIGltYWdlcyBmcm9tIHlvdXIgd2ViIGFwcGxpY2F0aW9uXG4gKiB1c2luZyB0aGUgTXV0YXRpb25PYnNlcnZlciBhbmQgdGhlIEludGVyc2VjdGlvbk9ic2VydmVyLiBJbWFnZXMgd2lsbCBiZSBsb2FkZWQgYXNcbiAqIHNvb24gYXMgdGhleSBlbnRlciB0aGUgdmlld3BvcnQgaW4gYSBub24tYmxvY2tpbmcgd2F5LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbGF6eS1sb2FkLWltYWdlc10nXG59KVxuZXhwb3J0IGNsYXNzIExhenlMb2FkSW1hZ2VzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoJ2xhenktbG9hZC1pbWFnZXMnKSBpbnRlcnNlY3Rpb25PYnNlcnZlckNvbmZpZzogb2JqZWN0IHwgc3RyaW5nO1xuXG4gIGludGVyc2VjdGlvbk9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcbiAgcm9vdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHVibGljIG5nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55KSB7XG4gICAgdGhpcy5yb290RWxlbWVudCA9IGVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5yZWdpc3RlckludGVyc2VjdGlvbk9ic2VydmVyKCk7XG5cbiAgICB0aGlzLm9ic2VydmVET01DaGFuZ2VzKHRoaXMucm9vdEVsZW1lbnQsICgpID0+IHtcbiAgICAgIGNvbnN0IGltYWdlc0ZvdW5kSW5ET00gPSB0aGlzLmdldEFsbEltYWdlc1RvTGF6eUxvYWQodGhpcy5yb290RWxlbWVudCk7XG4gICAgICBpbWFnZXNGb3VuZEluRE9NLmZvckVhY2goKGltYWdlOiBIVE1MRWxlbWVudCkgPT4gdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGltYWdlKSk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNCcm93c2VyKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXF1aXJlKCdpbnRlcnNlY3Rpb24tb2JzZXJ2ZXInKTtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmluaXQoKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgaXNCcm93c2VyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpO1xuICB9XG5cbiAgcmVnaXN0ZXJJbnRlcnNlY3Rpb25PYnNlcnZlcigpIHtcbiAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgaW1hZ2VzID0+IGltYWdlcy5mb3JFYWNoKGltYWdlID0+IHRoaXMub25JbnRlcnNlY3Rpb25DaGFuZ2UoaW1hZ2UpKSxcbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJDb25maWcgaW5zdGFuY2VvZiBPYmplY3QgPyB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyQ29uZmlnIDogdW5kZWZpbmVkXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyO1xuICB9XG5cbiAgb2JzZXJ2ZURPTUNoYW5nZXMocm9vdEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBvbkNoYW5nZTogKCkgPT4gdm9pZCkge1xuICAgIC8vIENyZWF0ZSBhIE11dGF0aW9uIE9ic2VydmVyIGluc3RhbmNlXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiBvbkNoYW5nZSgpKTtcblxuICAgIC8vIE9ic2VydmVyIENvbmZpZ3VyYXRpb25cbiAgICBjb25zdCBvYnNlcnZlckNvbmZpZyA9IHtcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH07XG5cbiAgICAvLyBPYnNlcnZlIERpcmVjdGl2ZSBET00gTm9kZVxuICAgIG9ic2VydmVyLm9ic2VydmUocm9vdEVsZW1lbnQsIG9ic2VydmVyQ29uZmlnKTtcblxuICAgIC8vIEZpcmUgb25DaGFuZ2UgY2FsbGJhY2sgdG8gY2hlY2sgY3VycmVudCBET00gbm9kZXNcbiAgICBvbkNoYW5nZSgpO1xuXG4gICAgcmV0dXJuIG9ic2VydmVyO1xuICB9XG5cbiAgZ2V0QWxsSW1hZ2VzVG9MYXp5TG9hZChwYWdlTm9kZTogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYWdlTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdpbWdbZGF0YS1zcmNdLCBbZGF0YS1zcmNzZXRdLCBbZGF0YS1iYWNrZ3JvdW5kLXNyY10nKSk7XG4gIH1cblxuICBvbkludGVyc2VjdGlvbkNoYW5nZShpbWFnZTogYW55KSB7XG4gICAgaWYgKCFpbWFnZS5pc0ludGVyc2VjdGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub25JbWFnZUFwcGVhcnNJblZpZXdwb3J0KGltYWdlLnRhcmdldCk7XG4gIH1cblxuICBvbkltYWdlQXBwZWFyc0luVmlld3BvcnQoaW1hZ2U6IGFueSkge1xuICAgIGlmIChpbWFnZS5kYXRhc2V0LnNyYykge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoaW1hZ2UsICdzcmMnLCBpbWFnZS5kYXRhc2V0LnNyYyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShpbWFnZSwgJ2RhdGEtc3JjJyk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmRhdGFzZXQuc3Jjc2V0KSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShpbWFnZSwgJ3NyY3NldCcsIGltYWdlLmRhdGFzZXQuc3Jjc2V0KTtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKGltYWdlLCAnZGF0YS1zcmNzZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2UuZGF0YXNldC5iYWNrZ3JvdW5kU3JjKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGltYWdlLCAnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoJHtpbWFnZS5kYXRhc2V0LmJhY2tncm91bmRTcmN9KWApO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUoaW1hZ2UsICdkYXRhLWJhY2tncm91bmQtc3JjJyk7XG4gICAgfVxuXG4gICAgLy8gU3RvcCBvYnNlcnZpbmcgdGhlIGN1cnJlbnQgdGFyZ2V0XG4gICAgaWYgKHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIudW5vYnNlcnZlKGltYWdlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==