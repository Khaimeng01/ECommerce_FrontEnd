!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("intersection-observer"),require("@angular/core"),require("@angular/common")):"function"==typeof define&&define.amd?define("ngx-lazy-load-images",["exports","intersection-observer","@angular/core","@angular/common"],t):t((e=e||self)["ngx-lazy-load-images"]={},e.intersectionObserver,e.ng.core,e.ng.common)}(this,(function(e,t,r,n){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;function o(e,t,r,n){var o,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,r,s):o(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s}var i=function(){function e(e,t,r,n){this.renderer=t,this.ngZone=r,this.platformId=n,this.rootElement=e.nativeElement}var t,i;return e.prototype.init=function(){var e=this;this.registerIntersectionObserver(),this.observeDOMChanges(this.rootElement,(function(){e.getAllImagesToLazyLoad(e.rootElement).forEach((function(t){return e.intersectionObserver.observe(t)}))}))},e.prototype.ngOnInit=function(){var e=this;this.isBrowser()&&this.ngZone.runOutsideAngular((function(){return e.init()}))},e.prototype.ngOnDestroy=function(){this.intersectionObserver&&this.intersectionObserver.disconnect()},e.prototype.isBrowser=function(){return n.isPlatformBrowser(this.platformId)},e.prototype.registerIntersectionObserver=function(){var e=this;return this.intersectionObserver=new IntersectionObserver((function(t){return t.forEach((function(t){return e.onIntersectionChange(t)}))}),this.intersectionObserverConfig instanceof Object?this.intersectionObserverConfig:void 0),this.intersectionObserver},e.prototype.observeDOMChanges=function(e,t){var r=new MutationObserver((function(){return t()}));return r.observe(e,{attributes:!0,characterData:!0,childList:!0,subtree:!0}),t(),r},e.prototype.getAllImagesToLazyLoad=function(e){return Array.from(e.querySelectorAll("img[data-src], [data-srcset], [data-background-src]"))},e.prototype.onIntersectionChange=function(e){e.isIntersecting&&this.onImageAppearsInViewport(e.target)},e.prototype.onImageAppearsInViewport=function(e){e.dataset.src&&(this.renderer.setAttribute(e,"src",e.dataset.src),this.renderer.removeAttribute(e,"data-src")),e.dataset.srcset&&(this.renderer.setAttribute(e,"srcset",e.dataset.srcset),this.renderer.removeAttribute(e,"data-srcset")),e.dataset.backgroundSrc&&(this.renderer.setStyle(e,"background-image","url("+e.dataset.backgroundSrc+")"),this.renderer.removeAttribute(e,"data-background-src")),this.intersectionObserver&&this.intersectionObserver.unobserve(e)},e.ctorParameters=function(){return[{type:r.ElementRef},{type:r.Renderer2},{type:r.NgZone},{type:void 0,decorators:[{type:r.Inject,args:[r.PLATFORM_ID]}]}]},o([r.Input("lazy-load-images")],e.prototype,"intersectionObserverConfig",void 0),e=o([r.Directive({selector:"[lazy-load-images]"}),(t=3,i=r.Inject(r.PLATFORM_ID),function(e,r){i(e,r,t)})],e)}(),s=function(){function e(){}return e=o([r.NgModule({declarations:[i],exports:[i]})],e)}();e.LazyLoadImagesDirective=i,e.LazyLoadImagesModule=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-lazy-load-images.umd.min.js.map